% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/render_scene.R
\name{render_scene}
\alias{render_scene}
\title{Title}
\usage{
render_scene(scene, width = 400, height = 400, fov = 20,
  samples = 100, lookfrom = c(10, 1, 0), lookat = c(0, 0, 0),
  aperture = 0.1, filename = NULL, backgroundhigh = "#80b4ff",
  backgroundlow = "#ffffff")
}
\arguments{
\item{scene}{Tibble of sphere locations and properties. Generate each row using one of the
material functions: [lambertian()], [metal()], and [dielectric()].}

\item{width}{Default `200`. Width of the render, in pixels.}

\item{height}{Default `200`. Height of the render, in pixels.}

\item{fov}{Default `20`. Field of view, in degrees.}

\item{samples}{Default `100`. Number of samples for each pixel.}

\item{lookfrom}{Default `c(10,1,0)`. Location of the camera.}

\item{lookat}{Default `c(0,0,0)`. Location where the camera is pointed.}

\item{aperture}{Default `0.1`. Aperture of the camera. Higher numbers will increase depth of field.}

\item{filename}{Default `NULL`. If present, the renderer will write to the filename instead
of the current device.}

\item{backgroundhigh}{Default `#80b4ff`. The "high" color in the background gradient. Can be either
a hexadecimal code, or a numeric rgb vector listing three intensities between `0` and `1`.}

\item{backgroundlow}{Default `#ffffff`. The "low" color in the background gradient. Can be either
a hexadecimal code, or a numeric rgb vector listing three intensities between `0` and `1`.}
}
\value{
Raytraced plot to current device, or an image saved to a file.
}
\description{
Title
}
\examples{
#Start with the ground
scene = generate_ground()
render_scene(scene)

#Add a sphere to the center
scene = add_sphere(scene, lambertian(x=0,y=0,z=0,radius=0.5,color=c(1,0,1)))
render_scene(scene)

#Add a metal ball (using hexcode color representation)
scene = add_sphere(scene, metal(x=0,y=0,z=1,radius=0.5,color="#ffffff",fuzz=0))
render_scene(scene)

#Add a brushed metal ball 
scene = add_sphere(scene, metal(x=0,y=1,z=0,radius=0.5,color=c(0.3,0.6,1),fuzz=0.25))
render_scene(scene)

#Add a dielectric (glass) ball
scene = add_sphere(scene, dielectric(x=0,y=0,z=-1,radius=0.5,refraction=1.6))
render_scene(scene)

#Add a grid of glass balls in front
glass_array_list = list() 

yloc = seq(-0.33,+0.33,length.out=3)
zloc = seq(-0.33,0.33,length.out=3)
locations = expand.grid(y=yloc,z=zloc)
for(i in 1:9) {
  glass_array_list[[i]] = dielectric(x=1,y=locations$y[i],z=locations$z[i], radius=0.15)
}
glass_array = do.call(rbind,glass_array_list)

scene = add_sphere(scene, glass_array)
render_scene(scene)

#Move the camera
render_scene(scene,lookfrom = c(7,1.5,10),lookat = c(0,0.5,0),fov=15)

#Change the background gradient to a night time ambience
render_scene(scene,lookfrom = c(7,1.5,10),lookat = c(0,0.5,0),fov=15,
                 backgroundhigh = "#282375", backgroundlow = "#7e77ea")
                 
#Increase the aperture to give more depth of field.
render_scene(scene,lookfrom = c(7,1.5,10),lookat = c(0,0.5,0),fov=15,
                 aperture = 1)
}
